generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum employmentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum role {
  ADMIN
  TEACHER
  STUDENT
  STAFF
  PARENT
}

enum admissionStatus {
  PENDING
  ADMITTED
  COMPLETED
  SUSPENDED
  TERMINATED
}

model User {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  firstName      String          @db.VarChar(255)
  middleName     String?         @db.VarChar(255)
  lastName       String          @db.VarChar(255)
  username       String          @unique @db.VarChar(255)
  gender         String          @db.VarChar(50)
  profilePhoto   String?         @db.VarChar(255)
  email          String?         @unique
  password       String?
  phoneNumber    String?         @db.VarChar(15)
  dateOfBirth    DateTime?
  refreshToken   String?         @unique
  role           role
  employmentType employmentType?
  isRevoked      Boolean         @default(false) // Flag to indicate if access is revoked

  // Relations to specific profiles
  student Student?
  teacher Teacher?
  staff   OtherStaff?
  parent  Parent?
  address Address?

  EventParticipant         EventParticipant[]
  Trip                     Trip[]
  Position                 Position[]
  Attendance               Attendance[]
  EducationalBackground    EducationalBackground[]
  WorkExperience           WorkExperience[]
  HealthAndSafety          HealthAndSafety[]
  Salary                   Salary[]
  StaffAccountDetails      StaffAccountDetails[]
  PerformanceAndEvaluation PerformanceAndEvaluation[]
  PerformanceAndEvaluators PerformanceAndEvaluation[] @relation("Evaluators")
  AttendanceRecorders      Attendance[]               @relation("AttendanceRecorder")
  StudentBehavior          StudentBehavior[]
  class                    Class[]
}

model Student {
  id              Int             @id @default(autoincrement())
  ethnicity       String          @db.VarChar(255)
  admissionStatus admissionStatus

  // One to many elations
  user                       User                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  level                      Level[]
  StudentApplicationNumber   StudentApplicationNumber @relation(fields: [studentApplicationNumberId], references: [id])
  userId                     Int                      @unique
  studentApplicationNumberId Int                      @unique

  // Many-to-many relations
  parents Parent[] @relation("StudentParents")
  courses Course[] @relation("StudentCourses")
  Trip    Trip[]

  // One to many relations
  Grade                   Grade[]
  ReportDetail            ReportDetail[]
  Payment                 Payment[]
  Sale                    Sale[]
  BookIssue               BookIssue[]
  DisciplinaryAction      DisciplinaryAction[]
  FormerSchools           FormerSchool[]
  StudentBehavior         StudentBehavior[]
  ExtracurricularActivity ExtracurricularActivity[]
}

model StudentApplicationNumber {
  id     Int      @id @default(autoincrement())
  number String   @unique
  taken  Boolean?

  Student Student[]
}

model Parent {
  id                    Int    @id @default(autoincrement())
  relationshipToStudent String

  // Relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique

  // Many-to-many relation with Student through the implicit join table
  wards Student[] @relation("StudentParents")
}

model Teacher {
  id                 Int      @id @default(autoincrement())
  digitalSignature   String
  spokenLanguages    String[]
  socialMediaHandles Json?
  maritalStatus      String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique

  courses Course[] @relation("TeacherCourses")

  Grade           Grade[]
  LessonTimetable LessonTimetable[]
}

model OtherStaff {
  id Int @id @default(autoincrement())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId   Int @unique
  salaryId Int

  Vehicle Vehicle[]
}

model Position {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(100) // e.g., "Class President", "Head of Department"
  holderType  role // Type of holder: "Student", "Teacher", "Staff"
  startDate   DateTime? // Optional start date for the position
  endDate     DateTime? // Optional end date for the position
  description String?   @db.VarChar(255) // Description of position
  role        String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int

  @@index([title, holderType])
}

model WorkExperience {
  id         Int      @id @default(autoincrement())
  position   String
  startDate  DateTime
  endtDate   DateTime
  department String?
  company    String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
}

model EducationalBackground {
  id             Int     @id @default(autoincrement())
  degree         String
  courseOfStudy  String
  institution    String
  specialization String?
  certifications String?
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int
}

model HealthAndSafety {
  id                      Int      @id @default(autoincrement())
  emergencyContactName    String?
  emergencyContactPhone   String?
  allergies               String[]
  medicalConditions       String[]
  healthInsurancePolicyId String?
  comments                String
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                  Int
}

model Address {
  id             Int     @id @default(autoincrement())
  city           String  @db.VarChar(50)
  region         String  @db.VarChar(50)
  country        String  @db.VarChar(255)
  postalCode     String? @db.VarChar(255)
  digitalAddress String  @db.VarChar(255)
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int     @unique
}

model PerformanceAndEvaluation {
  id               Int      @id @default(autoincrement())
  evaluationDate   DateTime // When the evaluation was conducted
  performanceScore Int // Rating scale (e.g., 1-5)
  feedback         String? // Optional qualitative feedback
  evaluationPeriod String? // Optional (e.g., "Q1 2024", "Annual Review")
  criteria         String[] //  Array of evaluated criteria, if you want to store it inline

  // Relationships
  staff       User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Evaluated staff member
  evaluator   User @relation("Evaluators", fields: [evaluatorId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  userId      Int
  evaluatorId Int // ID of the evaluator (could be supervisor, HR, etc.)
}

model Course {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)
  code String @unique @db.VarChar(50)

  students Student[] @relation("StudentCourses")
  teacher  Teacher[] @relation("TeacherCourses")
  class    Class[]   @relation("ClassCourses")

  Grade           Grade[]
  ReportDetail    ReportDetail[]
  Exam            Exam[]
  Curriculum      Curriculum[]
  LessonTimetable LessonTimetable[]
}

model Level {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50) // Name of the level, e.g., "Class 3", "JHS 3"
  code        String    @unique @db.VarChar(20) // Unique code for the level, e.g., "CLS3", "JHS3"
  description String?   @db.VarChar(255) // Optional description, e.g., "Primary School Level 3"
  order       Int // Ordering number to sort levels, e.g., 3 for Class 3, 9 for JHS 3
  Student     Student[]
  Class       Class[]
}

model Class {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(255)
  code        String  @unique @db.VarChar(50)
  hall        String  @unique @db.VarChar(50)
  description String? @db.VarChar(255)
  roomNumber  Int?    @unique

  // Relations
  level   Level? @relation(fields: [levelId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  levelId Int?

  courses         Course[]          @relation("ClassCourses")
  students        User[]
  LessonTimetable LessonTimetable[]
}

model LessonTimetable {
  id        Int      @id @default(autoincrement())
  dayOfWeek String // e.g., "Monday", "Tuesday", etc.
  startTime DateTime // The starting time of the lesson
  endTime   DateTime // The ending time of the lesson
  courseId  Int
  teacherId Int
  classId   Int
  termId    Int

  // Relations
  course  Course  @relation(fields: [courseId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
  term    Term    @relation(fields: [termId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dayOfWeek, startTime, classId], name: "timetable_unique_schedule")
}

// Model representing exams taken by students in a course
model Exam {
  id          Int      @id @default(autoincrement()) // Unique identifier for each exam
  name        String   @db.VarChar(100) // Name of the exam (e.g., "Midterm Exam")
  description String?  @db.VarChar(255) // Optional description of the exam
  date        DateTime // Date the exam will take place

  course   Course    @relation(fields: [courseId], references: [id], onDelete: SetDefault, onUpdate: Cascade) // Relation to Course model
  ExamType ExamType? @relation(fields: [examTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  term     Term      @relation(fields: [termId], references: [id], onDelete: SetDefault, onUpdate: Cascade)

  termId     Int
  examTypeId Int?
  courseId   Int // Foreign key to the course associated with this exam

  grades Grade[] // Relation to Grade model for recording scores related to this exam
}

// Model defining types of exams, such as "Midterm" or "Final"
model ExamType {
  id          Int     @id @default(autoincrement()) // Unique identifier for each exam type
  name        String  @unique // Unique name for the exam type
  description String? // Optional description for the exam type
  exams       Exam[] // Relation to Exam model, representing exams of this type
}

model Grade {
  id          Int     @id @default(autoincrement())
  score       Float // Numeric grade or score
  letterGrade String? @db.VarChar(5) // Optional, e.g., "A", "B+", etc.
  comments    String? @db.VarChar(255) // Optional comments about the grade

  // Relations
  student Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course  Course   @relation(fields: [courseId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  teacher Teacher? @relation(fields: [teacherId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  Exam    Exam     @relation(fields: [examId], references: [id], onDelete: SetDefault, onUpdate: Cascade)

  // Foreign keys for relations
  studentId Int
  courseId  Int
  teacherId Int
  examId    Int

  ReportDetail ReportDetail[]

  // Index for quick lookup of grades by student and course
  @@index([studentId, courseId])
}

model Term {
  id    Int      @id @default(autoincrement())
  name  String
  year  DateTime
  start DateTime
  end   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ReportDetail    ReportDetail[]
  Exam            Exam[]
  LessonTimetable LessonTimetable[]
}

model ReportDetail {
  id               Int     @id @default(autoincrement())
  positionInCourse Int
  courseComments   String? @db.VarChar(255) // Comments on performance for the specific course

  // Relations
  term    Term    @relation(fields: [termId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  grade   Grade   @relation(fields: [gradeId], references: [id], onDelete: SetDefault, onUpdate: Cascade)

  termId    Int
  courseId  Int
  studentId Int
  gradeId   Int
}

model Attendance {
  id            Int      @id @default(autoincrement())
  date          DateTime // The date of attendance
  status        String // e.g., "Present", "Absent", "Late", "Excused"
  remarks       String? // Optional: Additional details or notes
  category      role // "Student" or "Staff" to distinguish user type
  absenceReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recorder User @relation("AttendanceRecorder", fields: [recorderId], references: [id], onDelete: SetDefault, onUpdate: Cascade)

  userId     Int
  recorderId Int

  @@index([userId, date])
}

model Payment {
  id            Int      @id @default(autoincrement())
  totalAmount   Float // Total amount due for the payment
  amountPaid    Float    @default(0) // Total amount paid so far
  balanceDue    Float    @default(0) // Remaining balance
  paymentDate   DateTime @default(now()) // Date when payment was initiated
  paymentMethod String // e.g., "Cash", "Bank Transfer"
  status        String // e.g., "Completed", "Pending", "Partially Paid"

  // Relations
  student  Student?  @relation(fields: [studentId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  fee      Fee?      @relation(fields: [feeId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  saleItem SaleItem? @relation(fields: [saleItemId], references: [id], onDelete: SetDefault, onUpdate: Cascade)

  studentId  Int?
  feeId      Int?
  saleItemId Int?

  installments PaymentInstallment[]
  Transaction  Transaction[]

  @@index([studentId, feeId])
}

model PaymentInstallment {
  id              Int      @id @default(autoincrement())
  installmentDate DateTime @default(now()) // Date of the installment payment
  amount          Float // Amount of this specific installment
  status          String   @db.VarChar(50) // e.g., "Completed", "Pending"
  paymentMethod   String // e.g., "Cash", "Bank Transfer"
  remarks         String?  @db.VarChar(255) // Optional remarks about this installment

  // Relations
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  paymentId Int

  @@index([paymentId, installmentDate])
}

model Fee {
  id       Int       @id @default(autoincrement())
  name     String // e.g., "Tuition Fee", "Admission Fee"
  amount   Float // Fee amount
  term     String // e.g., "First Term", "Second Term"
  dueDate  DateTime // Due date for the fee
  payments Payment[] // Relation to payments
}

model Salary {
  id          Int      @id @default(autoincrement())
  amount      Float
  currency    String   @db.VarChar(10)
  paymentDate DateTime
  bonus       Float?
  deductions  Float?
  notes       String?  @db.VarChar(255)

  user        User          @relation(fields: [userId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  userId      Int
  Transaction Transaction[]
}

model StaffAccountDetails {
  id            Int      @id @default(autoincrement())
  accountType   String
  accountNumber DateTime
  nameOnAccount String

  user   User @relation(fields: [userId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  userId Int
}

enum paymentMethod {
  Mobile_Money
  Bank
  Card
  Cash
  Check
}

model momoUser {
  id          Int    @id @default(autoincrement())
  referenceId String
  apiKey      String
}

model Transaction {
  id                 Int           @id @default(autoincrement())
  type               String // e.g., "Payment", "Salary", "Refund", "Expense"
  amount             Float // Amount of the transaction
  currency           String
  transactionDate    DateTime      @default(now())
  status             String // e.g., "Completed", "Pending"
  payerAccountNumber String? // Optional: Account from which the money came
  paymentMethod      paymentMethod // e.g., "Bank", "Mobile Money"

  // Relations
  payment Payment? @relation(fields: [paymentId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  salary  Salary?  @relation(fields: [salaryId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  account Account? @relation(fields: [accountId], references: [id], onDelete: SetDefault, onUpdate: Cascade)

  paymentId              Int?
  salaryId               Int?
  accountId              Int?
  MobileMoneyTransaction MobileMoneyTransaction[]
}

model Account {
  id      Int    @id @default(autoincrement())
  name    String // e.g., "General Fund", "Salary Account"
  type    String // e.g., "Income", "Expense"
  balance Float  @default(0) // Current balance of the account

  transactions Transaction[]
}

model MobileMoneyTransaction {
  id                     Int      @id @default(autoincrement())
  amount                 Float // Amount of the transaction
  currency               String
  externalId             String   @unique
  partyIdType            String
  partyId                String
  payerMessage           String?
  payeeNote              String?
  financialTransactionId String?  @unique
  status                 String
  reason                 String?
  transactionDate        DateTime // Date of transaction
  accessToken            String   @unique
  referenceId            String?  @unique

  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  transactionId Int?
}

model ItemCategory {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String? @db.VarChar(255)
  items       Item[]
}

model Item {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  code        String       @unique @db.VarChar(50)
  description String?      @db.VarChar(255)
  price       Float
  costPrice   Float
  quantity    Int
  image       String?      @db.VarChar(255)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    ItemCategory @relation(fields: [categoryId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  categoryId  Int
  salesItems  SaleItem[]
  restocks    Restock[]
}

model Sale {
  id          Int        @id @default(autoincrement())
  saleDate    DateTime   @default(now())
  totalAmount Float
  status      SaleStatus
  balanceDue  Float      @default(0)
  student     Student?   @relation(fields: [studentId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  studentId   Int?
  SaleItem    SaleItem[]
}

model SaleItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float
  sale     Sale  @relation(fields: [saleId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  saleId   Int
  item     Item  @relation(fields: [itemId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  itemId   Int

  Payment Payment[]
}

model Restock {
  id          Int      @id @default(autoincrement())
  item        Item     @relation(fields: [itemId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  itemId      Int
  quantity    Int
  costPrice   Float
  restockDate DateTime @default(now())
}

enum SaleStatus {
  COMPLETED
  CANCELLED
  PENDING
  REFUNDED
}

// Model representing the curriculum details for a course
model Curriculum {
  id         Int     @id @default(autoincrement()) // Unique identifier for each curriculum entry
  courseId   Int // Foreign key to the course associated with this curriculum
  objectives String  @db.VarChar(255) // Brief overview of the learning objectives
  syllabus   String? @db.Text // Detailed syllabus for the course
  resources  String? @db.Text // Optional list of resources (e.g., textbooks, videos)

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Relation to Course model
}

// Model representing books available in the school library
model Book {
  id            Int       @id @default(autoincrement()) // Unique identifier for each book
  title         String    @db.VarChar(255) // Title of the book
  author        String    @db.VarChar(255) // Author of the book
  ISBN          String    @unique @db.VarChar(13) // Unique ISBN number for the book
  publisher     String?   @db.VarChar(255) // Optional publisher name
  publishedDate DateTime? // Optional publication date of the book
  quantity      Int       @default(1) // Quantity of this book available in the library
  categoryId    Int? // Foreign key to the category of the book

  category BookCategory? @relation(fields: [categoryId], references: [id], onDelete: SetDefault, onUpdate: Cascade) // Relation to BookCategory model
  issues   BookIssue[] // Relation to BookIssue model for tracking issued books
}

// Model tracking each instance of a book being issued to a student
model BookIssue {
  id         Int       @id @default(autoincrement()) // Unique identifier for each book issue record
  studentId  Int // Foreign key to the student borrowing the book
  bookId     Int // Foreign key to the issued book
  issueDate  DateTime  @default(now()) // Date when the book was issued
  dueDate    DateTime // Due date for the return of the book
  returnDate DateTime? // Date when the book was actually returned (if applicable)
  status     String    @default("Issued") // Status of the book issue (e.g., "Issued", "Returned", "Overdue")

  student Student @relation(fields: [studentId], references: [id], onDelete: SetDefault, onUpdate: Cascade) // Relation to Student model
  book    Book    @relation(fields: [bookId], references: [id], onDelete: SetDefault, onUpdate: Cascade) // Relation to Book model
}

// Model categorizing books in the library (e.g., "Fiction", "Science")
model BookCategory {
  id          Int     @id @default(autoincrement()) // Unique identifier for each book category
  name        String  @db.VarChar(255) // Name of the category
  description String? // Optional description of the category
  books       Book[] // Relation to Book model, representing books in this category
}

// Model representing school-wide events (e.g., meetings, sports events)
model Event {
  id          Int      @id @default(autoincrement()) // Unique identifier for each event
  name        String   @db.VarChar(100) // Name of the event
  description String?  @db.Text // Optional description of the event
  eventDate   DateTime // Date the event is scheduled to take place
  location    String?  @db.VarChar(255) // Optional location of the event

  participants EventParticipant[] // Relation to EventParticipant model for tracking participants
}

// Model linking users (students, teachers, or parents) to an event
model EventParticipant {
  id      Int    @id @default(autoincrement()) // Unique identifier for each event participant
  userId  Int // Foreign key to the participating user
  eventId Int // Foreign key to the event
  role    String @db.VarChar(50) // Role of the participant (e.g., "Speaker", "Guest")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Relation to User model
  event Event @relation(fields: [eventId], references: [id], onDelete: SetDefault, onUpdate: Cascade) // Relation to Event model
}

// Model tracking disciplinary actions taken against students
model DisciplinaryAction {
  id      Int      @id @default(autoincrement()) // Unique identifier for each disciplinary action
  date    DateTime @default(now()) // Date of the action
  action  String   @db.VarChar(255) // Type of action (e.g., "Suspension", "Detention")
  reason  String   @db.Text // Reason for the disciplinary action
  status  String   @default("Pending") // Status of the action (e.g., "Resolved", "Pending")
  remarks String?  @db.VarChar(255) // Optional remarks about the action

  student         Student           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Relation to Student model
  studentId       Int // Foreign key to the student involved in the action
  StudentBehavior StudentBehavior[]
}

model StudentBehavior {
  id           Int      @id @default(autoincrement())
  behaviorDate DateTime // Date of the behavior record
  behaviorType String? // Type of behavior (e.g., Positive, Negative, Neutral)
  behavior     String // The behavior name
  description  String // Detailed description of the behavior

  disciplinaryAction DisciplinaryAction[]
  reporter           User                 @relation(fields: [reporterId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  student            Student              @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reporterId         Int
  studentId          Int
}

model ExtracurricularActivity {
  id           Int       @id @default(autoincrement())
  activityName String // Name of the extracurricular activity (e.g., Soccer, Drama Club)
  startDate    DateTime // Start date of the activity
  endDate      DateTime? // End date of the activity (if applicable)
  position     String? // Position or role in the activity (e.g., Team Captain)
  description  String? // Additional description or details about the activity
  achievements String[] // List of achievements (e.g., awards, recognitions)
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId    Int
}

// Model representing vehicles used for student transportation
model Vehicle {
  id           Int    @id @default(autoincrement()) // Unique identifier for each vehicle
  licensePlate String @unique // License plate of the vehicle
  type         String @db.VarChar(50) // Type of vehicle (e.g., "Bus", "Van")
  capacity     Int // Capacity of the vehicle (number of passengers)

  driver   OtherStaff? @relation(fields: [driverId], references: [id], onDelete: SetDefault, onUpdate: Cascade) // Relation to Staff model
  driverId Int? // Foreign key to the staff member driving the vehicle

  routes Route[] // Relation to Route model for vehicle routes
}

// Model representing routes that school vehicles take
model Route {
  id          Int     @id @default(autoincrement()) // Unique identifier for each route
  name        String  @db.VarChar(255) // Name of the route
  description String? // Optional description of the route
  vehicleId   Int // Foreign key to the assigned vehicle

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: SetDefault, onUpdate: Cascade) // Relation to Vehicle model
  trips   Trip[] // Relation to Trip model for tracking individual trips
}

// Model representing individual transportation trips on specific routes
model Trip {
  id       Int      @id @default(autoincrement()) // Unique identifier for each trip
  tripDate DateTime // Date the trip took place
  status   String   @db.VarChar(50) // Status of the trip (e.g., "Completed", "In Progress")

  // Many-to-Many Relationship with Student
  students Student[] // Students participating in this trip

  route   Route @relation(fields: [routeId], references: [id], onDelete: SetDefault, onUpdate: Cascade) // Relation to Route model
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Relation to User model tracking the trip
  routeId Int // Foreign key to the route of the trip
  userId  Int // Foreign key to the user tracking the trip
}

model FormerSchool {
  id               Int       @id @default(autoincrement())
  name             String    @unique // Name of the former school
  address          String? // Address of the former school
  contactNumber    String? // Contact number of the former school
  email            String? // Email of the former school
  schoolType       String? // Type of school (e.g., Public, Private, Boarding)
  startDate        DateTime? // Start date at the former school
  endDate          DateTime? // End date at the former school
  reasonForLeaving String? // Reason for transferring schools

  student                    Student                      @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId                  Int
  AcademicPerformance        AcademicPerformance[]
  BehaviorAndExtracurricular BehaviorAndExtracurricular[]
  AdministrativeDetails      AdministrativeDetails[]
  HealthAndSupport           HealthAndSupport[]
}

model AcademicPerformance {
  id              Int          @id @default(autoincrement())
  previousGrade   String? // Last grade or class attended
  promotionStatus String? // Promoted, retained, or repeating
  courses         String[] // List of subjects studied
  grades          Json? // Grades or marks for subjects
  classRanking    String? // Class ranking (optional)
  specialPrograms String[] // Participation in special programs (e.g., gifted, remedial)
  formerSchool    FormerSchool @relation(fields: [formerSchoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formerSchoolId  Int
}

model BehaviorAndExtracurricular {
  id                  Int          @id @default(autoincrement())
  behaviorRecord      String? // Notes on behavior or conduct
  disciplinaryActions String? // Any disciplinary actions
  extracurriculars    String[] // List of clubs, sports, or activities
  achievements        String[] // Awards or recognitions
  formerSchool        FormerSchool @relation(fields: [formerSchoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formerSchoolId      Int
}

model AdministrativeDetails {
  id                   Int          @id @default(autoincrement())
  transferCertificate  String? // Transfer certificate (optional)
  recommendationLetter String? // Recommendation letter
  feesCleared          Boolean      @default(false) // Indicates if fees were fully paid, optional for now but to be changed back to required later
  formerSchool         FormerSchool @relation(fields: [formerSchoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formerSchoolId       Int
}

model HealthAndSupport {
  id             Int          @id @default(autoincrement())
  healthRecords  Json? // Vaccination or medical records
  specialNeeds   String? // Details of accommodations or support required
  formerSchool   FormerSchool @relation(fields: [formerSchoolId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formerSchoolId Int
}
